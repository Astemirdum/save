// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"
	time "time"

	models "github.com/Astemirdum/save/server/models"
	gomock "github.com/golang/mock/gomock"
)

// MockFileContentService is a mock of FileContentService interface.
type MockFileContentService struct {
	ctrl     *gomock.Controller
	recorder *MockFileContentServiceMockRecorder
}

// MockFileContentServiceMockRecorder is the mock recorder for MockFileContentService.
type MockFileContentServiceMockRecorder struct {
	mock *MockFileContentService
}

// NewMockFileContentService creates a new mock instance.
func NewMockFileContentService(ctrl *gomock.Controller) *MockFileContentService {
	mock := &MockFileContentService{ctrl: ctrl}
	mock.recorder = &MockFileContentServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileContentService) EXPECT() *MockFileContentServiceMockRecorder {
	return m.recorder
}

// Append mocks base method.
func (m *MockFileContentService) Append(ctx context.Context, req *models.WriteRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Append", ctx, req)
	ret0, _ := ret[0].(error)
	return ret0
}

// Append indicates an expected call of Append.
func (mr *MockFileContentServiceMockRecorder) Append(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Append", reflect.TypeOf((*MockFileContentService)(nil).Append), ctx, req)
}

// Create mocks base method.
func (m *MockFileContentService) Create(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockFileContentServiceMockRecorder) Create(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockFileContentService)(nil).Create), ctx)
}

// Download mocks base method.
func (m *MockFileContentService) Download(ctx context.Context) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Download", ctx)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Download indicates an expected call of Download.
func (mr *MockFileContentServiceMockRecorder) Download(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Download", reflect.TypeOf((*MockFileContentService)(nil).Download), ctx)
}

// GetFileCount mocks base method.
func (m *MockFileContentService) GetFileCount() uint32 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileCount")
	ret0, _ := ret[0].(uint32)
	return ret0
}

// GetFileCount indicates an expected call of GetFileCount.
func (mr *MockFileContentServiceMockRecorder) GetFileCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileCount", reflect.TypeOf((*MockFileContentService)(nil).GetFileCount))
}

// GetServerTime mocks base method.
func (m *MockFileContentService) GetServerTime() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServerTime")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// GetServerTime indicates an expected call of GetServerTime.
func (mr *MockFileContentServiceMockRecorder) GetServerTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServerTime", reflect.TypeOf((*MockFileContentService)(nil).GetServerTime))
}
